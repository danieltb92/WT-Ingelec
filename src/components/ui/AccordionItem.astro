---
type Props = {
  index: number;
  title: string;
  description: string;
  image?: string; // Nuevo campo opcional para la imagen
  title2: string;
  body: string[];
};

const { title, description, image, title2, body } = Astro.props;
---

<div
  id="accordion__item"
  class="accordion__item group max-sm:h-[60px] h-[160px] bg-[#FFFFFF] overflow-hidden w-full transition-all duration-500 mb-[30px] rounded-[15px] border border-dark shadow-[0px_5px_0px_#191a23]"
>
  <button
    class="accordion__toggle w-full max-sm:h-[60px] h-[160px] flex items-center justify-between p-4 sm:p-[60px] cursor-pointer"
    id={`${title} accordion__item menu button`}
    aria-expanded="false"
    aria-controls={`${title} accordion__item menu content`}
  >
    <div class="flex items-center gap-4 sm:gap-[25px] flex-1 min-w-0">
      <span class="block text-base sm:text-xl md:text-2xl lg:text-3xl truncate">{title}</span>
    </div>
    <div
      class="bg-gray w-10 h-10 sm:w-[58px] sm:h-[58px] flex justify-center items-center rounded-full border border-dark flex-shrink-0 ml-4"
    >
      <div
        class="accordion__icon h-6 w-6 sm:h-10 sm:w-10 transition-transform duration-300 flex justify-center items-center relative"
        aria-hidden="true"
      >
      </div>
    </div>
  </button>
  <div
    id={`${title} accordion__item menu content`}
    aria-labelledby={`${title} accordion__item menu button `}
    class="accordion__content px-4 sm:px-[60px]"
  >
    <div class="w-full h-[2px] bg-black"></div>
    <p class="prose mb-4 mt-1 max-w-full pt-5 pb-[60px] transition-[height]">
      {description}
    </p>
    {image && (
      <div class="flex justify-center w-full my-4">
        <img src={image} alt={title} class="h-auto rounded-lg shadow" />
      </div>
    )}
    <div>
      <h3 class="prose mb-1 mt-1 max-w-full pt-5 pb-[10px] transition-[height]">
        {title2}
      </h3>
      {Array.isArray(body) && body.length > 0 && body[0] !== "" ? (
        <ul class="mb-4 mt-1 max-w-full pt-1 pb-[60px] list-disc pl-6 transition-[height]">
          {body.map((item) => (
            <li>{item}</li>
          ))}
        </ul>
      ) : null}
    </div>
  </div>
</div>
<style>
  .accordion__icon::before,
  .accordion__icon::after {
    content: "";
    position: absolute;
    background-color: black;
    transition: opacity 0.3s ease;
  }

  .accordion__icon::before {
    width: 100%;
    height: 6px; /* Increased from 2px to 6px */
    left: 0;
    top: calc(50% - 3px); /* Adjusted to center the thicker line */
  }

  .accordion__icon::after {
    width: 6px; /* Increased from 2px to 6px */
    height: 100%;
    left: calc(50% - 3px); /* Adjusted to center the thicker line */
    top: 0;
  }

  .accordion__icon.collapsed::after {
    opacity: 0;
  }
</style>
<script>
  function accordionSetup() {
    const accordionItems = document.querySelectorAll(
      ".accordion__item"
    ) as NodeListOf<HTMLElement>;

    function adjustHeights() {
      accordionItems.forEach((accordionItem) => {
        const accordionToggle = accordionItem.querySelector(".accordion__toggle") as HTMLElement;
        if (accordionItem.classList.contains("active")) {
          // Si está abierto, ajusta la altura al nuevo scrollHeight
          accordionItem.style.height = accordionItem.scrollHeight + "px";
        } else if (accordionToggle) {
          // Si está cerrado, ajusta la altura al alto del botón
          accordionItem.style.height = accordionToggle.offsetHeight + "px";
        }
      });
    }

    accordionItems.forEach((accordionItem) => {
      const accordionToggle = accordionItem.querySelector(".accordion__toggle");
      const accordionIcon = accordionItem.querySelector(".accordion__icon");

      // Add event listener to the toggle button
      if (accordionToggle && accordionIcon) {
        accordionToggle.addEventListener("click", (e) => {
          e.stopPropagation();

          // Close other accordion items
          accordionItems.forEach((otherAccordionItem) => {
            if (
              otherAccordionItem !== accordionItem &&
              otherAccordionItem.classList.contains("active")
            ) {
              const otherAccordionToggle =
                otherAccordionItem.querySelector(".accordion__toggle");
              const otherAccordionIcon =
                otherAccordionItem.querySelector(".accordion__icon");

              if (otherAccordionToggle && otherAccordionIcon) {
                otherAccordionItem.classList.remove("active");
                otherAccordionItem.classList.remove("bg-white");
                otherAccordionToggle.setAttribute("aria-expanded", "false");
                // Ajusta la altura cerrada según el alto real del botón
                otherAccordionItem.style.height = (otherAccordionToggle as HTMLElement).offsetHeight + "px";
                otherAccordionIcon.classList.remove("rotate-180");
                otherAccordionIcon.classList.remove("collapsed");
              }
            }
          });

          // Abre/cierra el acordeón actual
          if (!accordionItem.classList.contains("active")) {
            accordionItem.classList.add("active");
            accordionToggle.setAttribute("aria-expanded", "true");

            // Set height according to content
            accordionItem.style.height = accordionItem.scrollHeight + "px";
            accordionItem.classList.add("bg-white");
            accordionIcon.classList.add("rotate-180");
            accordionIcon.classList.add("collapsed");
          } else {
            accordionItem.classList.remove("active");
            accordionToggle.setAttribute("aria-expanded", "false");

            // Ajusta la altura cerrada según el alto real del botón
            accordionItem.style.height = (accordionToggle as HTMLElement).offsetHeight + "px";
            accordionIcon.classList.remove("rotate-180");
            accordionItem.classList.remove("bg-white");
            accordionIcon.classList.remove("collapsed");
          }

          // Al abrir/cerrar, ajusta la altura correctamente
          setTimeout(adjustHeights, 350); // Espera a la transición para ajustar

          e.preventDefault();
          return false;
        });
      }
    });

    // Close the accordion when clicking outside of it
    document.addEventListener("click", (event) => {
      accordionItems.forEach((accordionItem) => {
        const accordionToggle =
          accordionItem.querySelector(".accordion__toggle");
        const accordionIcon = accordionItem.querySelector(".accordion__icon");

        if (
          accordionToggle &&
          accordionIcon &&
          !accordionItem.contains(event.target as Node)
        ) {
          accordionItem.classList.remove("active");
          accordionItem.classList.remove("bg-white");
          accordionToggle.setAttribute("aria-expanded", "false");

          // Ajusta la altura cerrada según el alto real del botón
          accordionItem.style.height = (accordionToggle as HTMLElement).offsetHeight + "px";
          accordionIcon.classList.remove("rotate-180");
          accordionIcon.classList.remove("collapsed");
        }
      });
    });

    // Ajusta alturas al cambiar el tamaño de la ventana
    window.addEventListener("resize", adjustHeights);
    // Ajusta alturas al cargar
    adjustHeights();
  }

  // Run on page swap
  accordionSetup();
  document.addEventListener("astro:after-swap", accordionSetup);
</script>
</script>
